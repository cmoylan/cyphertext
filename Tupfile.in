#OBJS specifies which files to compile as part of the project
OBJS = src/Util.cpp \
	src/Shader.cpp \
	src/Entity.cpp \
	src/Character.cpp \
	src/Enemy.cpp \
	src/BulletRegistry.cpp \
	src/EnemyAI.cpp src/CollisionManager.cpp \
	src/Background.cpp \
	src/Level.cpp \
	src/GameUtil.cpp \
	src/GameInput.cpp \
	src/Game.cpp \
	src/Menu.cpp \
	src/Sound.cpp \
	src/TextRenderer.cpp \
	src/main.cpp

#build dir...
BUILD_DIR = build

starcom_CFLAGS = -I/usr/local/include \
		 -I/usr/include/SOIL \
		 -I/usr/include/GL \
		 @SDL_CFLAGS@ \
		 @SDL_Mixer_CFLAGS@ \
		 @Freetype_CFLAGS@ \
		 @SOIL_CFLAGS@ \
		 -I./include/

# g - compile with debug information
# Wall - show all compiler warnings
# Wextra - show extra compiler warninres
# std=c++0 - compile against c++11 standard
CFLAGS = -g -Wall -Wextra -std=c++0x $(starcom_CFLAGS) $(OPTFLAGS)

starcom_LIBS = -L/usr/local/lib \
		-L/opt/local/lib \
		@SDL_LIBS@ \
		@SDL_Mixer_LIBS@ \
		@Freetype_LIBS@

LIBS = $(starcom_LIBS)

LINKER_FLAGS = @GL_LINKER_FLAG@ -lSDL2 -lGLEW -lSOIL -lSDL2_mixer -lfreetype

#assemble the compiler command
CC = g++ $(CFLAGS) $(LIBS)

#OBJ_NAME specifies the name of our exectuable
OBJ_NAME = engine

# compile each .cpp file into a .o
: foreach $(OBJS) |> $(CC) -c %f -o %o |> $(BUILD_DIR)/%B.o

# compile and link all .o into the main executable
: $(BUILD_DIR)/*.o |> $(CC) %f -o %o $(LINKER_FLAGS) |> $(OBJ_NAME)
